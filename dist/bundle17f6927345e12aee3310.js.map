{"version":3,"file":"bundle17f6927345e12aee3310.js","mappings":"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uBAAuB,CAAC,CAC/Ca,OAAO,CAAC,UAAAwD,MAAM,EAAI;MACjBA,MAAM,CAACtH,gBAAgB,CAAC,OAAO,EAAE,YAAM;QACrC,IAAM+F,KAAK,GAAGuB,MAAM,CAACL,YAAY,CAAC,qBAAqB,CAAC;QACxDnB,cAAc,CAACC,KAAK,CAAC;QACrBM,QAAQ,CAACN,KAAK,CAAC;QACfS,eAAe,CAACT,KAAK,EAAE,IAAI,CAAC;MAC9B,CAAC,CAAC;IACJ,CAAC,CAAC;EACN,CAAC,CAAC;AACN,CAAC,EAAE,CAAC;;AAGJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iB","sources":["webpack://template/./src/index.js"],"sourcesContent":["\r\ndocument.addEventListener('DOMContentLoaded', function () {\r\n  let wordBank = [\r\n    {\r\n      name: \"Photosynthesis\",\r\n      teks: \"Nature and Environments\",\r\n      definitions: {\r\n          easy: \"Process used by plants to convert light energy into food.\",\r\n          medium: \"The process by which green plants and some other organisms use sunlight to synthesize foods from carbon dioxide and water.\",\r\n          hard: \"A complex process where chlorophyll in plant cells captures light energy and converts it into chemical energy, involving multiple stages including the Calvin cycle.\"\r\n      }\r\n    },\r\n    {\r\n        name: \"Biotic Factors\",\r\n        teks: \"Nature and Environments\",\r\n        definitions: {\r\n            easy: \"Living parts of where organisms live, like plants and animals.\",\r\n            medium: \"The living parts of an ecosystem, such as plants, animals, and microorganisms.\",\r\n            example: \"Birds, trees, and bacteria in a forest\"\r\n        }\r\n        },\r\n        {\r\n        name: \"Abiotic Factors\",\r\n        teks: \"Nature and Environments\",\r\n        definitions: {\r\n            easy: \"Nonliving parts of where organisms live, like sunlight and water.\",\r\n            medium: \"The nonliving parts of an ecosystem, such as sunlight, water, soil, and temperature.\",\r\n            example: \"Sunlight and water in a desert ecosystem\"\r\n        }\r\n        },\r\n        {\r\n        name: \"Habitat\",\r\n        teks: \"Nature and Environments\",\r\n        definitions: {\r\n            easy: \"The natural home of a specific kind of animal or plant.\",\r\n            medium: \"The natural environment in which a specific species lives and grows.\",\r\n            example: \"Coral reefs for tropical fish\"\r\n        }\r\n        },\r\n        {\r\n        name: \"Producer\",\r\n        teks: \"Nature and Environments\",\r\n        definitions: {\r\n            easy: \"Living things that make their own food from sunlight. Plants, trees and grass are examples of it.\",\r\n            medium: \"Organisms that make their own food by absorbing the sun’s light. They make their own food.\",\r\n            example: \"Plants making food through photosynthesis\"\r\n        }\r\n        },\r\n        {\r\n        name: \"Consumer\",\r\n        teks: \"Nature and Environments\",\r\n        definitions: {\r\n            easy: \"Living things that eat other living things for energy.\",\r\n            medium: \"Organisms that obtain energy by eating other organisms.\",\r\n            example: \"A lion eating a zebra\"\r\n        }\r\n        },\r\n        {\r\n        name: \"Interdependence\",\r\n        teks: \"Nature and Environments\",\r\n        definitions: {\r\n            easy: \"How living things rely on each other and their environment to survive.\",\r\n            medium: \"The reliance of organisms on other living and nonliving elements in their environment for survival.\",\r\n            example: \"Bees and flowers depending on each other\"\r\n        }\r\n        },\r\n        {\r\n        name: \"Predator\",\r\n        teks: \"Nature and Environments\",\r\n        definitions: {\r\n            easy: \"An animal that hunts and eats other animals.\",\r\n            medium: \"An animal that naturally preys on others.\",\r\n            example: \"A hawk hunting for mice\"\r\n        }\r\n        },\r\n        {\r\n        name: \"Prey\",\r\n        teks: \"Nature and Environments\",\r\n        definitions: {\r\n            easy: \"An animal that is hunted and eaten by predators.\",\r\n            medium: \"An animal that is hunted and killed by another for food.\",\r\n            example: \"A rabbit being hunted by a fox\"\r\n        }\r\n        },\r\n        {\r\n        name: \"Pollination\",\r\n        teks: \"Nature and Environments\",\r\n        definitions: {\r\n            easy: \"The process of moving pollen to flowers to make seeds, often done by birds and insects.\",\r\n            medium: \"The process by which pollen is transferred to the female reproductive organs of a plant, enabling fertilization. Often done by birds and insects.\",\r\n            example: \"Bees transferring pollen among flowers\"\r\n        }\r\n        },\r\n      \r\n      {\r\n        name: \"Food Web\",\r\n        teks: \"Nature and Environments\",\r\n        definitions: {\r\n          easy: \"A network showing who eats whom in an ecosystem.\",\r\n          medium: \"A complex network of feeding relationships between organisms in an ecosystem, showing how energy flows through trophic levels.\",\r\n          example: \"Forest Food Web\"\r\n        }\r\n      },\r\n      {\r\n        name: \"Energy Flow\",\r\n        teks: \"Nature and Environments\",\r\n        definitions: {\r\n          easy: \"How energy moves from plants to animals in a food chain.\",\r\n          medium: \"The movement of energy through a food chain or food web, from primary producers to various consumers.\",\r\n          example: \"Energy Flow in an Ocean Ecosystem\"\r\n        }\r\n      },\r\n      {\r\n        name: \"Sun\",\r\n        teks: \"Nature and Environments\",\r\n        definitions: {\r\n          easy: \"The main source of energy for life on Earth.\",\r\n          medium: \"The primary source of energy for most ecosystems, driving photosynthesis in producers.\",\r\n          example: \"The Sun's Role in a Forest Ecosystem\"\r\n        }\r\n      },\r\n      {\r\n        name: \"Producers (Autotrophs)\",\r\n        teks: \"Nature and Environments\",\r\n        definitions: {\r\n          easy: \"Living things that make their own food, like plants.\",\r\n          medium: \"Organisms that produce their own food through photosynthesis (e.g., plants, algae) and are the foundation of the energy flow in ecosystems.\",\r\n          example: \"Plants in a Grassland Ecosystem\"\r\n        }\r\n      },\r\n      {\r\n        name: \"Consumers (Heterotrophs)\",\r\n        teks: \"Nature and Environments\",\r\n        definitions: {\r\n          easy: \"Living things that eat other living things for energy.\",\r\n          medium: \"Organisms that obtain energy by eating other organisms. They can be primary (herbivores), secondary (carnivores that eat herbivores), or tertiary consumers (carnivores that eat other carnivores).\",\r\n          example: \"Lions as Secondary Consumers in a Savannah\"\r\n        }\r\n      },\r\n      {\r\n        name: \"Decomposers\",\r\n        teks: \"Nature and Environments\",\r\n        definitions: {\r\n          easy: \"Tiny living things that break down dead plants and animals.\",\r\n          medium: \"Organisms (such as bacteria and fungi) that break down dead or decaying organisms, returning essential nutrients to the soil and supporting the energy flow.\",\r\n          example: \"Fungi Decomposing a Fallen Tree\"\r\n        }\r\n      },\r\n      {\r\n        name: \"Trophic Levels\",\r\n        teks: \"Nature and Environments\",\r\n        definitions: {\r\n          easy: \"Different steps in the food chain, showing who eats whom.\",\r\n          medium: \"The levels of a food chain or web defined by the organism's source of energy, ranging from producers to various levels of consumers.\",\r\n          example: \"Trophic Levels in a Pond Ecosystem\"\r\n        }\r\n      },\r\n      {\r\n        name: \"Ecosystems\",\r\n        teks: \"Nature and Environments\",\r\n        definitions: {\r\n          easy: \"Places where living things and non-living things interact within their habitat.\",\r\n          medium: \"Communities of living organisms and their physical environment, interacting as a system.\",\r\n          example: \"Rainforest Ecosystem\"\r\n        }\r\n      },\r\n      {\r\n        name: \"Biodiversity\",\r\n        teks: \"Nature and Environments\",\r\n        definitions: {\r\n          easy: \"The variety of all living things in a place.\",\r\n          medium: \"The variety of life in a particular ecosystem or the entire planet, crucial for ecosystem resilience.\",\r\n          example: \"Biodiversity in the Amazon Rainforest\"\r\n        }\r\n      },\r\n      {\r\n        name: \"Habitat Alteration\",\r\n        teks: \"Nature and Environments\",\r\n        definitions: {\r\n          easy: \"When the natural home of animals and plants changes, often because of humans.\",\r\n          medium: \"Changes to the natural environment in which an organism lives, often resulting from human activities like urban development or agriculture.\",\r\n          example: \"Building a Dam and Altering River Habitats\"\r\n        }\r\n      },\r\n      {\r\n        name: \"Pollution\",\r\n        teks: \"Nature and Environments\",\r\n        definitions: {\r\n          easy: \"Adding harmful things to the environment, like trash, chemicals, and harmful gases.\",\r\n          medium: \"The introduction of harmful substances or products into the environment, negatively affecting wildlife and ecosystems.\",\r\n          example: \"Plastic Pollution in Oceans\"\r\n        }\r\n      },\r\n      {\r\n        name: \"Overpopulation\",\r\n        teks: \"Nature and Environments\",\r\n        definitions: {\r\n          easy: \"Too many individuals of a species in one place, causing harm to the environment.\",\r\n          medium: \"A condition where the number of organisms exceeds the carrying capacity of their habitat, often leading to environmental degradation.\",\r\n          example: \"Deer Overpopulation in a Forest\"\r\n        }\r\n      },\r\n      {\r\n        name: \"Conservation\",\r\n        teks: \"Nature and Environments\",\r\n        definitions: {\r\n          easy: \"Protecting and taking care of nature and wildlife.\",\r\n          medium: \"The protection and preservation of natural resources and environments.\",\r\n          example: \"Conservation Efforts in National Parks\"\r\n        }\r\n      },\r\n      {\r\n        name: \"Sustainable Practices\",\r\n        teks: \"Nature and Environments\",\r\n        definitions: {\r\n          easy: \"Using natural resources in a way that doesn't run out and helps the Earth.\",\r\n          medium: \"Methods of using resources in a way that does not deplete them and preserves the environment for future generations.\",\r\n          example: \"Renewable Energy Sources like Wind and Solar\"\r\n        }\r\n      },\r\n      {\r\n        name: \"Urbanization\",\r\n        teks: \"Nature and Environments\",\r\n        definitions: {\r\n          easy: \"The growth of cities and towns, where more people live and work in one place.\",\r\n          medium: \"The process by which towns and cities are formed and become larger as more people begin living and working in central areas, often leading to habitat destruction.\",\r\n          example: \"Expansion of Cities and Loss of Green Spaces\"\r\n        }\r\n      },\r\n      {\r\n        name: \"Matter\",\r\n        teks: \"Properties of Matter\",\r\n        definitions: {\r\n          easy: \"Anything that has mass and takes up space.\"\r\n        }\r\n      },\r\n      {\r\n        name: \"Classify\",\r\n        teks: \"Properties of Matter\",\r\n        definitions: {\r\n          easy: \"To sort or organize things into different groups.\"\r\n        }\r\n      },\r\n      {\r\n        name: \"Measurable\",\r\n        teks: \"Properties of Matter\",\r\n        definitions: {\r\n          easy: \"Something that can be measured or quantified.\"\r\n        }\r\n      },\r\n      {\r\n        name: \"Testable\",\r\n        teks: \"Properties of Matter\",\r\n        definitions: {\r\n          easy: \"Something that can be tested or experimented on.\"\r\n        }\r\n      },\r\n      {\r\n        name: \"Observable\",\r\n        teks: \"Properties of Matter\",\r\n        definitions: {\r\n          easy: \"Something that can be seen or noticed with your 5 senses.\"\r\n        }\r\n      },\r\n      {\r\n        name: \"Physical Properties\",\r\n        teks: \"Properties of Matter\",\r\n        definitions: {\r\n          easy: \"Features of matter that you can see or measure using your 5 senses or tools.\"\r\n        }\r\n      },\r\n      {\r\n        name: \"Mass\",\r\n        teks: \"Properties of Matter\",\r\n        definitions: {\r\n          easy: \"How much matter an object has.\"\r\n        }\r\n      },\r\n      {\r\n        name: \"Magnetism\",\r\n        teks: \"Properties of Matter\",\r\n        definitions: {\r\n          easy: \"The force that makes certain things attract or repel each other, based on the poles of the magnet and magnetic metals.\"\r\n        }\r\n      },\r\n      {\r\n        name: \"Physical State\",\r\n        teks: \"Properties of Matter\",\r\n        definitions: {\r\n          easy: \"The form matter takes, like solid (hard), liquid (water), or gas (like air).\"\r\n        }\r\n      },\r\n      {\r\n        name: \"Solid\",\r\n        teks: \"Properties of Matter\",\r\n        definitions: {\r\n          easy: \"A form of matter that has a fixed shape and doesn't flow.\"\r\n        }\r\n      },\r\n      {\r\n        name: \"Liquid\",\r\n        teks: \"Properties of Matter\",\r\n        definitions: {\r\n          easy: \"A form of matter that flows and takes the shape of its container but keeps the same volume.\"\r\n        }\r\n      },\r\n      {\r\n        name: \"Gas\",\r\n        teks: \"Properties of Matter\",\r\n        definitions: {\r\n          easy: \"A form of matter that can spread out to fill any space. Cannot be seen most of the times, particles have a lot of energy.\"\r\n        }\r\n      },\r\n      {\r\n        name: \"Relative Density\",\r\n        teks: \"Properties of Matter\",\r\n        definitions: {\r\n          easy: \"Whether something is heavier or lighter compared to water, deciding if it will sink or float.\"\r\n        }\r\n      },\r\n      {\r\n        name: \"Sinking and Floating\",\r\n        teks: \"Properties of Matter\",\r\n        definitions: {\r\n          easy: \"If something goes down in water (sinks) or stays on the top (floats).\"\r\n        }\r\n      },\r\n      {\r\n        name: \"Solubility\",\r\n        teks: \"Properties of Matter\",\r\n        definitions: {\r\n          easy: \"How well a substance can dissolve in water.\"\r\n        }\r\n      },\r\n      {\r\n        name: \"Water\",\r\n        teks: \"Properties of Matter\",\r\n        definitions: {\r\n          easy: \"Used as a standard to test sinking, floating, and solubility.\"\r\n        }\r\n      },\r\n      {\r\n        name: \"Conduct\",\r\n        teks: \"Properties of Matter\",\r\n        definitions: {\r\n          easy: \"To let energy flow through something easily, metals are great at this.\"\r\n        }\r\n      },\r\n      {\r\n        name: \"Insulate\",\r\n        teks: \"Properties of Matter\",\r\n        definitions: {\r\n          easy: \"To not let energy go through something easily, it stops energy flow.\"\r\n        }\r\n      },\r\n      {\r\n        name: \"Thermal Energy\",\r\n        teks: \"Properties of Matter\",\r\n        definitions: {\r\n          easy: \"The energy that comes from heat.\"\r\n        }\r\n      },\r\n      {\r\n        name: \"Electric Energy\",\r\n        teks: \"Properties of Matter\",\r\n        definitions: {\r\n          easy: \"The power that comes from the flow of electricity.\"\r\n        }\r\n      },\r\n      {\r\n        name: \"Mixtures\",\r\n        teks: \"Properties of Matter\",\r\n        definitions: {\r\n          easy: \"Things mixed together, materials keep their physical properties, still easy to separate. Like cereal with milk - you can see and pick out each part.\"\r\n        }\r\n      },\r\n      {\r\n        name: \"Solutions\",\r\n        teks: \"Properties of Matter\",\r\n        definitions: {\r\n          easy: \"When something (like sugar) mixes completely with something else (like water) and you can't see it anymore. Particles are mixed very well.\"\r\n        }\r\n      },\r\n      {\r\n        name: \"Dissolve\",\r\n        teks: \"Properties of Matter\",\r\n        definitions: {\r\n          easy: \"Like when sugar or salt disappears in water. It's still there, but you can't see the particles as they are spread out evenly.\"\r\n        }\r\n      }      \r\n  ];\r\n  \r\n\r\n  let score = 0;\r\n  let totalQuestions = 0;\r\n  const levels = ['easy', 'medium', 'hard'];\r\n  let currentLevel = 'easy'; // Default level\r\n  let pendingQuestions = []; // Store words for later\r\n\r\n  function getRandomElement(arr) {\r\n      return arr[Math.floor(Math.random() * arr.length)];\r\n  }\r\n\r\n  function generateQuestion() {\r\n      if (pendingQuestions.length > 0 && Math.random() > 0.5) {\r\n          // Random chance to pick from pending questions\r\n          selectedWord = pendingQuestions.shift();\r\n      } else {\r\n          // Select a random word from the word bank\r\n          selectedWord = getRandomElement(wordBank);\r\n      }\r\n\r\n      const correctDefinition = selectedWord.definitions[currentLevel];\r\n\r\n      let choices = [correctDefinition];\r\n      // Generate incorrect choices\r\n      while (choices.length < 4) {\r\n          const randomWord = getRandomElement(wordBank);\r\n          const randomDefinition = randomWord.definitions[currentLevel];\r\n\r\n          if (!choices.includes(randomDefinition)) {\r\n              choices.push(randomDefinition);\r\n          }\r\n      }\r\n\r\n      // Shuffle choices\r\n      choices.sort(() => Math.random() - 0.5);\r\n\r\n      // Display question and choices\r\n      const gameDiv = document.getElementById('game');\r\n      gameDiv.innerHTML = `\r\n      <div class=\"fs-3 justify-content-center\">${selectedWord.name}</div>\r\n      <div>\r\n          ${choices.map((choice, index) => `\r\n              <div class=\"form-check\">\r\n                  <input class=\"form-check-input btn-outline-dark\" type=\"radio\" name=\"definition\" id=\"choice${index}\">\r\n                  <label class=\"form-check-label\" for=\"choice${index}\">${choice}</label>\r\n              </div>\r\n          `).join('')}\r\n      </div>\r\n      <div class=\"d-flex justify-content-start mt-3\"> <!-- Flex container for buttons -->\r\n          <button class=\"btn btn-primary\" onclick=\"checkAnswer('${selectedWord.name}', '${correctDefinition}')\">Submit</button>\r\n          <button id=\"nextButton\" class=\"btn btn-secondary ml-2\" onclick=\"nextQuestion()\" disabled>Next Question</button>\r\n      </div>\r\n      `;\r\n  }\r\n\r\n\r\n  function highlightAnswer(label, isCorrect) {\r\n      label.classList.add(isCorrect ? 'text-success' : 'text-danger', 'fw-bold');\r\n      if (isCorrect) {\r\n          setTimeout(nextQuestion, 500); // Proceed to next question after half a second\r\n      } else {\r\n          document.getElementById('nextButton').disabled = false; // Enable the next button for incorrect answers\r\n      }\r\n  }\r\n\r\n\r\n  function checkAnswer(wordName, correctDefinition) {\r\n    const allRadioButtons = document.querySelectorAll('.form-check-input');\r\n    const selected = document.querySelector('input[name=\"definition\"]:checked');\r\n    const submitButton = document.querySelector('.btn-primary'); // Reference to the submit button\r\n\r\n    if (selected) {\r\n        let isCorrect = false;\r\n        const selectedLabel = selected.nextElementSibling;\r\n\r\n        if (selectedLabel.textContent === correctDefinition) {\r\n            isCorrect = true;\r\n            score++; // Increment score for a correct answer\r\n            wordBank = wordBank.filter(word => word.name !== wordName); // Remove the word from the word bank if answered correctly\r\n        } else {\r\n            let delay = Math.floor(Math.random() * 6) + 5; // Random delay between 5 to 10 questions for pending questions\r\n            let currentQuestionIndex = totalQuestions + delay;\r\n            pendingQuestions.splice(currentQuestionIndex, 0, wordBank.find(word => word.name === wordName)); // Add incorrect word to pending questions\r\n        }\r\n\r\n        highlightAnswer(selectedLabel, isCorrect);\r\n\r\n        allRadioButtons.forEach(radio => {\r\n            radio.disabled = true; // Disable all radio buttons after an answer is submitted\r\n        });\r\n\r\n        if (!isCorrect) {\r\n            submitButton.disabled = true; // Disable the submit button if the answer is incorrect\r\n            document.getElementById('nextButton').disabled = false; // Enable the next button for incorrect answers\r\n        }\r\n\r\n        totalQuestions++;\r\n        updateScoreDisplay(); // Update the displayed score\r\n\r\n        // Integrate tower logic based on the correctness of the answer\r\n        answer(isCorrect); // Call the tower logic's answer function\r\n\r\n    }\r\n}\r\n\r\n\r\nfunction highlightAnswer(label, isCorrect) {\r\n    label.classList.add(isCorrect ? 'text-success' : 'text-danger', 'fw-bold');\r\n    if (isCorrect) {\r\n        setTimeout(nextQuestion, 500); // Proceed to next question after half a second\r\n    } else {\r\n        document.getElementById('nextButton').disabled = false; // Enable the next button for incorrect answers\r\n    }\r\n}\r\n\r\n// Additional functions like nextQuestion, updateScoreDisplay, etc. should be defined as per your application's needs.\r\n\r\n\r\n\r\n\r\n  function updateScoreDisplay() {\r\n    document.getElementById('score').innerText = `Score: ${score} / ${totalQuestions}`;\r\n  }\r\n\r\n  function nextQuestion() {\r\n    // Reset the game area and generate a new question\r\n    document.getElementById('game').innerHTML = '';\r\n    generateQuestion();\r\n    document.getElementById('nextButton').disabled = true; // Disable next button until answer is checked\r\n  }\r\n\r\n  window.checkAnswer = checkAnswer;\r\n  window.nextQuestion = nextQuestion;\r\n\r\n  // Initial call to start the game\r\n  generateQuestion();\r\n\r\n  // Append score and next button\r\n  const gameDiv = document.getElementById('game');\r\n  const gameContainerDiv = document.getElementById('game-container');\r\n  gameDiv.insertAdjacentHTML('beforebegin', `<p id=\"score\" class=\"text-center\">Score: ${score} / ${totalQuestions}</p>`);\r\n  // gameContainerDiv.insertAdjacentHTML('afterend', `<button id=\"nextButton\" class=\"btn btn-secondary mt-3\" onclick=\"nextQuestion()\" disabled>Next Question</button>`);\r\n});\r\n\r\n\r\n// ***********************************************************************************\r\n// Tower game logic\r\nlet tower = [];\r\nlet correctStreak = 0;\r\nlet incorrectStreak = 0;\r\nlet multiplier = 1;\r\nlet floorCount = 0;\r\nconst multiplierBase = 1; // Base multiplier value\r\n\r\nfunction updateTower() {\r\n  const towerElement = document.getElementById('tower');\r\n  towerElement.innerHTML = ''; // Clear existing tower\r\n\r\n  // Update the multiplier and floor count display\r\n  const multiplierDisplay = document.getElementById('multiplier-display');\r\n  if (multiplierDisplay) {\r\n      multiplierDisplay.textContent = `Multiplier: x${multiplier} | Floors: ${floorCount}`;\r\n  }\r\n\r\n  tower.forEach(floor => {\r\n      const floorElement = document.createElement('div');\r\n      floorElement.classList.add('floor', 'bg-success', 'my-1');\r\n      if (floor.damaged) {\r\n          floorElement.classList.remove('bg-success');\r\n          floorElement.classList.add('bg-danger');\r\n      }\r\n      towerElement.appendChild(floorElement);\r\n  });\r\n}\r\n\r\n\r\nfunction addFloor(multiplier) {\r\n  for (let i = 0; i < multiplier; i++) {\r\n      tower.push({ damaged: false });\r\n      floorCount++; // Increment floor count for each added floor\r\n  }\r\n  updateTower();\r\n}\r\n\r\nfunction removeFloor() {\r\n  if (tower.length > 0) {\r\n      tower.pop();\r\n      floorCount = Math.max(0, floorCount - 1); // Decrement floor count, ensuring it doesn't go below 0\r\n      updateTower();\r\n  }\r\n}\r\n\r\nfunction damageFloor() {\r\n    if (tower.length > 0) {\r\n        tower[tower.length - 1].damaged = true;\r\n        updateTower();\r\n    }\r\n}\r\n\r\n\r\nfunction answer(correct) {\r\n    if (correct) {\r\n        correctStreak++;\r\n        incorrectStreak = 0;\r\n        // Remove damage if exists\r\n        if (tower.length > 0 && tower[tower.length - 1].damaged) {\r\n            tower[tower.length - 1].damaged = false;\r\n        }\r\n        // Update multiplier based on streak\r\n        if (correctStreak >= 20) multiplier = 5;\r\n        else if (correctStreak >= 15) multiplier = 4;\r\n        else if (correctStreak >= 10) multiplier = 3;\r\n        else if (correctStreak >= 5) multiplier = 2;\r\n        else multiplier = 1;\r\n\r\n        addFloor(multiplier);\r\n    } else {\r\n        correctStreak = 0;\r\n        incorrectStreak++;\r\n        // Apply damage or remove a floor\r\n        if (incorrectStreak >= 2) {\r\n            removeFloor();\r\n            incorrectStreak = 0; // Reset incorrect streak after removing a floor\r\n        } else {\r\n            damageFloor();\r\n        }\r\n    }\r\n}\r\n\r\n// Modify the checkAnswer function to use the answer(correct) function from tower logic\r\n// Replace the existing checkAnswer implementation with the integrated one that updates the tower based on correctness\r\n\r\n// Initial tower update\r\nupdateTower();\r\n\r\n\r\n/*!\r\n * Color mode toggler for Bootstrap's docs (https://getbootstrap.com/)\r\n * Copyright 2011-2023 The Bootstrap Authors\r\n * Licensed under the Creative Commons Attribution 3.0 Unported License.\r\n */\r\n(() => {\r\n    'use strict'\r\n  \r\n    const getStoredTheme = () => localStorage.getItem('theme')\r\n    const setStoredTheme = theme => localStorage.setItem('theme', theme)\r\n  \r\n    const getPreferredTheme = () => {\r\n      const storedTheme = getStoredTheme()\r\n      if (storedTheme) {\r\n        return storedTheme\r\n      }\r\n  \r\n      return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'\r\n    }\r\n  \r\n    const setTheme = theme => {\r\n      if (theme === 'auto' && window.matchMedia('(prefers-color-scheme: dark)').matches) {\r\n        document.documentElement.setAttribute('data-bs-theme', 'dark')\r\n      } else {\r\n        document.documentElement.setAttribute('data-bs-theme', theme)\r\n      }\r\n    }\r\n  \r\n    setTheme(getPreferredTheme())\r\n  \r\n    const showActiveTheme = (theme, focus = false) => {\r\n      const themeSwitcher = document.querySelector('#bd-theme')\r\n  \r\n      if (!themeSwitcher) {\r\n        return\r\n      }\r\n  \r\n      const themeSwitcherText = document.querySelector('#bd-theme-text')\r\n      const activeThemeIcon = document.querySelector('.theme-icon-active use')\r\n      const btnToActive = document.querySelector(`[data-bs-theme-value=\"${theme}\"]`)\r\n      const svgOfActiveBtn = btnToActive.querySelector('svg use').getAttribute('href')\r\n  \r\n      document.querySelectorAll('[data-bs-theme-value]').forEach(element => {\r\n        element.classList.remove('active')\r\n        element.setAttribute('aria-pressed', 'false')\r\n      })\r\n  \r\n      btnToActive.classList.add('active')\r\n      btnToActive.setAttribute('aria-pressed', 'true')\r\n      activeThemeIcon.setAttribute('href', svgOfActiveBtn)\r\n      const themeSwitcherLabel = `${themeSwitcherText.textContent} (${btnToActive.dataset.bsThemeValue})`\r\n      themeSwitcher.setAttribute('aria-label', themeSwitcherLabel)\r\n  \r\n      if (focus) {\r\n        themeSwitcher.focus()\r\n      }\r\n    }\r\n  \r\n    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {\r\n      const storedTheme = getStoredTheme()\r\n      if (storedTheme !== 'light' && storedTheme !== 'dark') {\r\n        setTheme(getPreferredTheme())\r\n      }\r\n    })\r\n  \r\n    window.addEventListener('DOMContentLoaded', () => {\r\n      showActiveTheme(getPreferredTheme())\r\n  \r\n      document.querySelectorAll('[data-bs-theme-value]')\r\n        .forEach(toggle => {\r\n          toggle.addEventListener('click', () => {\r\n            const theme = toggle.getAttribute('data-bs-theme-value')\r\n            setStoredTheme(theme)\r\n            setTheme(theme)\r\n            showActiveTheme(theme, true)\r\n          })\r\n        })\r\n    })\r\n})()\r\n\r\n\r\n// TOWER GAME\r\n// let tower = [];\r\n// let correctStreak = 0;\r\n// let incorrectStreak = 0;\r\n// let multiplier = 1;\r\n\r\n// function updateTower() {\r\n//     const towerElement = document.getElementById('tower');\r\n//     towerElement.innerHTML = ''; // Clear existing tower\r\n//     tower.forEach(floor => {\r\n//         const floorElement = document.createElement('div');\r\n//         floorElement.classList.add('floor', 'bg-success', 'my-1');\r\n//         if (floor.damaged) {\r\n//             floorElement.classList.remove('bg-success');\r\n//             floorElement.classList.add('bg-danger');\r\n//         }\r\n//         towerElement.appendChild(floorElement);\r\n//     });\r\n// }\r\n\r\n// function addFloor(multiplier) {\r\n//     for (let i = 0; i < multiplier; i++) {\r\n//         tower.push({ damaged: false });\r\n//     }\r\n//     updateTower();\r\n// }\r\n\r\n// function damageFloor() {\r\n//     if (tower.length > 0) {\r\n//         tower[tower.length - 1].damaged = true;\r\n//         updateTower();\r\n//     }\r\n// }\r\n\r\n// function removeFloor() {\r\n//     if (tower.length > 0) {\r\n//         tower.pop();\r\n//         updateTower();\r\n//     }\r\n// }\r\n\r\n// function answer(correct) {\r\n//     if (correct) {\r\n//         correctStreak++;\r\n//         incorrectStreak = 0;\r\n//         // Remove damage if exists\r\n//         if (tower.length > 0 && tower[tower.length - 1].damaged) {\r\n//             tower[tower.length - 1].damaged = false;\r\n//         }\r\n//         // Update multiplier based on streak\r\n//         if (correctStreak >= 20) multiplier = 5;\r\n//         else if (correctStreak >= 15) multiplier = 4;\r\n//         else if (correctStreak >= 10) multiplier = 3;\r\n//         else if (correctStreak >= 5) multiplier = 2;\r\n//         else multiplier = 1;\r\n\r\n//         addFloor(multiplier);\r\n//     } else {\r\n//         correctStreak = 0;\r\n//         incorrectStreak++;\r\n//         // Apply damage or remove a floor\r\n//         if (incorrectStreak >= 2) {\r\n//             removeFloor();\r\n//             incorrectStreak = 0; // Reset incorrect streak after removing a floor\r\n//         } else {\r\n//             damageFloor();\r\n//         }\r\n//     }\r\n// }\r\n\r\n// // Initial tower update\r\n// updateTower();\r\n"],"names":["document","addEventListener","wordBank","name","teks","definitions","easy","medium","hard","example","score","totalQuestions","levels","currentLevel","pendingQuestions","getRandomElement","arr","Math","floor","random","length","generateQuestion","selectedWord","shift","correctDefinition","choices","randomWord","randomDefinition","includes","push","sort","gameDiv","getElementById","innerHTML","concat","map","choice","index","join","highlightAnswer","label","isCorrect","classList","add","setTimeout","nextQuestion","disabled","checkAnswer","wordName","allRadioButtons","querySelectorAll","selected","querySelector","submitButton","selectedLabel","nextElementSibling","textContent","filter","word","delay","currentQuestionIndex","splice","find","forEach","radio","updateScoreDisplay","answer","innerText","window","gameContainerDiv","insertAdjacentHTML","tower","correctStreak","incorrectStreak","multiplier","floorCount","multiplierBase","updateTower","towerElement","multiplierDisplay","floorElement","createElement","damaged","remove","appendChild","addFloor","i","removeFloor","pop","max","damageFloor","correct","getStoredTheme","localStorage","getItem","setStoredTheme","theme","setItem","getPreferredTheme","storedTheme","matchMedia","matches","setTheme","documentElement","setAttribute","showActiveTheme","focus","arguments","undefined","themeSwitcher","themeSwitcherText","activeThemeIcon","btnToActive","svgOfActiveBtn","getAttribute","element","themeSwitcherLabel","dataset","bsThemeValue","toggle"],"sourceRoot":""}